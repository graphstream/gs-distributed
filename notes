


Gestion d'un index de graphs / nodes / edges

Classe créé un pointeur rmi
Faire une classe qui va multi-threader n processus
Faire une classe de gestion d'erreur commune log4j (classe statique)
RMIDGraph



- Synchrone RMI

- Asynchrone JMS (apache activ MQ eventuellement)

- Serialisation des objets en JSON
Node to JSON
Edge to JSON
Graph to JSON
Attribute to JSON
Element to JSON
--


g1.exec("g2.getNode('n1').addAttribute", params);
g1



--------------------------------------------------------------

public Object[] exec(String[] objectIds, String[] methods, Object[][] params) throws java.rmi.RemoteException {
		Object[] res = new Object[objectIds.length];
		for(int i = 0 ; i < objectIds.length ; i++ ) {
			res[i] = dynamicCall(this.Registry.get(objectIds[i]), methods[i], params[i]);
		}
		return res ;
	}


	/*
	 * Dynamique invocation
	 */
	private Object dynamicCall(Object anObject, String aMethod, Object[] params) {
		try {
			Class[] argType ;
			if(params!=null) {
				argType = new Class[params.length] ;
			} else {
				argType = new Class[0];
			}
		  	for(int i = 0 ; i < argType.length ; i++) {
		  		argType[i] = params[i].getClass();
		  	}
		  	Method m = anObject.getClass().getMethod(aMethod, argType);
			Object res = m.invoke(anObject, params);

			// pour savoir si une classe est serializable ou pas (je regarde si c'est une classe du package java ou pas)
			// a modifier
			if(res != null && !res.getClass().getName().startsWith("org.graphstream")) {
				return res ;
			}
			else {
				return false ;
			}
		}
		catch(IllegalAccessException e) {
			System.out.println("IllegalAccessException exception : " + e.getMessage());
			return false ;
		}
		catch(NoSuchMethodException e) {
			System.out.println("NoSuchMethodException exception : " + e.getMessage());
			return false ;
		}
		catch(InvocationTargetException e) {
			System.out.println("InvocationTargetException exception : " + e.getMessage() + e.getCause());
			return null ;
		}
	}
	
	/**
	 * Generic request
	 */
	public Object exec(String requestId, String objectId, String methode, Object[] params) throws java.rmi.RemoteException {
		return exec(objectId, methode, params);
	}
	
	public Object exec(String objectId, String methode, Object[] params) throws java.rmi.RemoteException {
		System.out.println("-----------"+this.Registry.get(objectId));
		return dynamicCall(this.Registry.get(objectId), methode, params);
	}

	/**
	 * Generic request multi
	 */
	public Object[] exec(String[] requestId, String[] objectIds, String[] methods, Object[][] params) throws java.rmi.RemoteException {
		return exec(objectIds, methods, params);
	}
	
	
		/**
	 * Dynamique invocation
	 */
	public static Object call(Object anObject, String aMethod, Object[] params) {
		try {
			Class[] argType ;
			if(params!=null) {
				argType = new Class[params.length] ;
			} else {
				argType = new Class[0];
			}
		  	for(int i = 0 ; i < argType.length ; i++) {
		  		argType[i] = params[i].getClass();
		  	}
		  	Method m = anObject.getClass().getMethod(aMethod, argType);
			Object res = m.invoke(anObject, params);

			// pour savoir si une classe est serializable ou pas (je regarde si c'est une classe du package java ou pas)
			if(res != null && !res.getClass().getName().startsWith("org.graphstream")) {
				return res ;
			}
			else {
				return false ;
			}
		}
		catch(IllegalAccessException e) {
			System.out.println("IllegalAccessException exception : " + e.getMessage());
			return false ;
		}
		catch(NoSuchMethodException e) {
			System.out.println("NoSuchMethodException exception : " + e.getMessage());
			return  false ;
		}
		catch(InvocationTargetException e) {
			System.out.println("InvocationTargetException exception : " + e.getMessage() + e.getCause());
			return false ;
		}
	}
	
	beamer
	bibli agrume lip6
	tina
	scala visualisation
	gefi visualisatiuo
	iscpif.fr/moma